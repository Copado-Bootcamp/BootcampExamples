public with sharing class CaseUpdateHandler {
    
    public static void updateCases(List<Case> cases) {
        if (!Schema.sObjectType.Case.isUpdateable() || 
            !Schema.sObjectType.Case.fields.OwnerId.isUpdateable() ||
            !Schema.sObjectType.Case.fields.Status.isUpdateable() ||
            !Schema.sObjectType.Case.fields.IsEscalated.isUpdateable() ||
            !Schema.sObjectType.Case.fields.Description.isUpdateable() ||
            !Schema.sObjectType.Case.fields.Subject.isUpdateable()) {
            throw new SecurityException('Insufficient permissions to update Cases');
        }

        // Pre-fetch the Queue Ids
        Map<String, Id> queueIds = getQueueIds();
        
        // Collect all AccountIds and ContactIds from the cases
        Set<Id> accountIds = new Set<Id>();
        Set<Id> contactIds = new Set<Id>();
        
        for (Case currentCase : cases) {
            if (currentCase.AccountId != null) {
                accountIds.add(currentCase.AccountId);
            }
            if (currentCase.ContactId != null) {
                contactIds.add(currentCase.ContactId);
            }
        }
        
        // Query related records with security checks
        Map<Id, Account> accountMap = new Map<Id, Account>();
        if (!accountIds.isEmpty() && Schema.sObjectType.Account.isAccessible()) {
            accountMap = new Map<Id, Account>([
                SELECT Id, Type 
                FROM Account 
                WHERE Id IN :accountIds 
                WITH SECURITY_ENFORCED
            ]);
        }
        
        Map<Id, Contact> contactMap = new Map<Id, Contact>();
        if (!contactIds.isEmpty() && Schema.sObjectType.Contact.isAccessible()) {
            contactMap = new Map<Id, Contact>([
                SELECT Id, HasOptedOutOfEmail 
                FROM Contact 
                WHERE Id IN :contactIds 
                WITH SECURITY_ENFORCED
            ]);
        }
        
        for (Case currentCase : cases) {
            // Method 1: Partner Account Escalation
            if (accountMap.containsKey(currentCase.AccountId)) {
                Account relatedAccount = accountMap.get(currentCase.AccountId);
                if (relatedAccount.Type == 'Partner') {
                    currentCase.OwnerId = queueIds.get('Partner Escalation Queue');
                    currentCase.Status = 'Escalated';
                    currentCase.IsEscalated = true;
                }
            }

            // Method 2: Contact Opt-Out
            if (contactMap.containsKey(currentCase.ContactId)) {
                Contact relatedContact = contactMap.get(currentCase.ContactId);
                if (relatedContact.HasOptedOutOfEmail) {
                    currentCase.Description = 'Phone Call ONLY - ' + currentCase.Description;
                }
            }

            // Method 3: Entitlement Subject Update
            if (currentCase.EntitlementId != null) {
                String newSubject = 'Entitlement - ' + currentCase.Subject;
                currentCase.Subject = newSubject.length() > 255 ? 
                    newSubject.substring(0, 255) : newSubject;
                currentCase.Description = currentCase.Subject + ' ' + currentCase.Description;
            }

            // Method 4: Community Origin Case
            if (currentCase.Origin == 'Community') {
                currentCase.OwnerId = queueIds.get('Copado Support Queue');
            }

            // Method 5: High Priority Escalation
            if (currentCase.Priority == 'High') {
                currentCase.Status = 'Escalated';
                currentCase.IsEscalated = true;
            }
        }

        // Perform final update with security check
        if (!cases.isEmpty()) {
            Security.stripInaccessible(AccessType.UPDATABLE, cases);
            update cases;
        }
    }
    
    private static Map<String, Id> getQueueIds() {
        Map<String, Id> queueMap = new Map<String, Id>();
        
        if (Schema.sObjectType.Group.isAccessible()) {
            for (Group queue : [
                SELECT Id, Name 
                FROM Group 
                WHERE Type = 'Queue' 
                AND Name IN ('Partner Escalation Queue', 'Copado Support Queue')
                WITH SECURITY_ENFORCED
                LIMIT 2
            ]) {
                queueMap.put(queue.Name, queue.Id);
            }
        }
        
        return queueMap;
    }
}
